@model IEnumerable<BookingToursWeb.Models.Booking>
@{
    ViewData["Title"] = "Quản lý Lịch hẹn";
    Layout = "~/Views/Shared/Admin/_AdminLayout.cshtml"; // Đảm bảo đường dẫn này đúng
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">Quản lý Lịch hẹn</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a asp-action="Index">Admin Dashboard</a></li>
                <li class="breadcrumb-item active" aria-current="page">Quản lý Lịch hẹn</li>
            </ol>
        </nav>
    </div>
</div>

<p>Đây là trang quản lý các lịch hẹn. Bạn có thể xem và quản lý lịch hẹn trên lịch bên dưới.</p>

<div class="mb-3">
    <a asp-action="AddAppointment" class="btn btn-primary">Thêm lịch hẹn mới</a>
</div>

<div id="calendar" style="margin-top: 20px;"></div>

<h3 class="mt-4">Danh sách Lịch hẹn</h3>
<div class="table-responsive">
    @if (Model != null && Model.Any())
    {
        // Nhóm các lịch hẹn theo Địa điểm (Location)
        // Sử dụng ?? để đảm bảo có một tên nhóm nếu Location.Name là null (mặc dù với .Include() nó không nên null)
        var groupedAppointments = Model.GroupBy(b => b.Location?.Name ?? "Địa điểm không xác định");

        foreach (var group in groupedAppointments)
        {
            <h4 class="mt-4 mb-2">Địa điểm: @group.Key</h4>
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Người dùng</th>
                        @* Bỏ cột Địa điểm ở đây vì mỗi bảng đã được nhóm theo địa điểm *@
                        <th>Ngày hẹn</th>
                        <th>Số khách</th>
                        <th>Tổng tiền</th>
                        <th>Trạng thái</th>
                        <th>Ghi chú</th>
                        <th>Ngày tạo</th>
                        <th>Ngày cập nhật</th>
                        <th>Hành động</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in group.OrderBy(b => b.AppointmentDate)) // Sắp xếp các lịch hẹn trong từng nhóm
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.Id)</td>
                            <td>@(item.User?.Username ?? "N/A")</td>
                            @* Bỏ cột Địa điểm ở đây *@
                            <td>@Html.DisplayFor(modelItem => item.AppointmentDate)</td>
                            <td>@Html.DisplayFor(modelItem => item.NumberOfVisitors)</td>
                            <td>@Html.DisplayFor(modelItem => item.TotalAmount)</td>
                            <td>@Html.DisplayFor(modelItem => item.Status)</td>
                            <td>@(item.SpecialNotes ?? "Không có")</td>
                            <td>@Html.DisplayFor(modelItem => item.CreatedAt)</td>
                            <td>@Html.DisplayFor(modelItem => item.UpdatedAt)</td>
                            <td>
                                <a asp-action="EditAppointment" asp-route-id="@item.Id" class="btn btn-info btn-sm">Sửa</a> |
                                <form asp-action="DeleteAppointment" asp-route-id="@item.Id" method="post" style="display:inline;" onsubmit="return confirm('Bạn có chắc chắn muốn xóa lịch hẹn ID: @item.Id của người dùng @(item.User?.Username ?? "N/A") không?');">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-danger btn-sm">Xóa</button>
                                </form>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
    else
    {
        <p>Không có lịch hẹn nào.</p>
    }
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/locales/vi.js"></script>

    <style>
        /* CSS để làm mờ và ẩn số ngày của các ngày trong quá khứ */
        /* Áp dụng cho cả ngày trong tháng (fc-day-past) và ngày ngoài tháng (fc-day-other) nếu là ngày quá khứ */
        .fc-daygrid-day.fc-day-past,
        .fc-daygrid-day.fc-day-other.fc-day-past {
            background-color: #f0f0f0 !important; /* Màu nền xám nhạt */
            opacity: 0.6 !important; /* Làm mờ toàn bộ ô ngày */
            cursor: not-allowed !important; /* Thay đổi con trỏ chuột thành biểu tượng cấm */
            /* pointer-events: none; KHÔNG CẦN NỮA VÌ selectAllow ĐÃ XỬ LÝ VIỆC CHỌN */
        }

            .fc-daygrid-day.fc-day-past .fc-daygrid-day-number,
            .fc-daygrid-day.fc-day-other.fc-day-past .fc-daygrid-day-number {
                display: none !important; /* ẨN HOÀN TOÀN SỐ NGÀY */
            }

        /* Đảm bảo các ngày ngoài tháng (không phải quá khứ, tức là ngày tương lai) vẫn có thể hiển thị số ngày nếu cần */
        .fc-daygrid-day.fc-day-other:not(.fc-day-past) {
            background-color: #f8f8f8 !important; /* Màu nền xám nhạt hơn cho ngày ngoài tháng (tương lai) */
            opacity: 0.8 !important; /* Làm mờ nhẹ hơn so với ngày quá khứ */
            cursor: default !important; /* Con trỏ chuột bình thường */
        }

            .fc-daygrid-day.fc-day-other:not(.fc-day-past) .fc-daygrid-day-number {
                display: block !important; /* HIỂN THỊ LẠI SỐ NGÀY cho ngày ngoài tháng (tương lai) */
            }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var calendarEl = document.getElementById('calendar');

            if (calendarEl) {
                // Lấy ngày hiện tại (không có giờ, phút, giây)
                const today = new Date();
                today.setHours(0, 0, 0, 0); // Đặt về đầu ngày để so sánh chính xác

                var calendar = new FullCalendar.Calendar(calendarEl, {
                    initialView: 'dayGridMonth',
                    locale: 'vi',
                    headerToolbar: {
                        left: 'customPrev,customNext customToday',
                        center: 'title',
                        right: 'dayGridMonth,listWeek'
                    },
                    titleFormat: function(date) {
                        const monthNames = [
                            "Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6",
                            "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"
                        ];
                        const monthIndex = date.date.month;
                        const year = date.date.year;
                        return monthNames[monthIndex] + ' năm ' + year;
                    },
                    buttonText: {
                        today: 'Hôm nay',
                        month: 'Tháng',
                        listWeek: 'Danh sách tuần'
                    },
                    customButtons: {
                        customPrev: {
                            text: '<',
                            click: function() {
                                calendar.prev();
                            }
                        },
                        customNext: {
                            text: '>',
                            click: function() {
                                calendar.next();
                            }
                        },
                        customToday: {
                            text: 'Hôm nay',
                            click: function() {
                                calendar.today();
                            }
                        }
                    },
                    events: '/Admin/GetAppointmentsForCalendar', // Giữ nguyên nguồn sự kiện

                    selectable: true,
                    // SỬ DỤNG selectAllow ĐỂ NGĂN CHẶN CHỌN NGÀY TRONG QUÁ KHỨ
                    selectAllow: function(selectInfo) {
                        const startDate = new Date(selectInfo.startStr);
                        startDate.setHours(0, 0, 0, 0); // Chuẩn hóa về đầu ngày
                        return startDate >= today; // Chỉ cho phép chọn ngày hiện tại hoặc tương lai
                    },
                    select: function(info) {
                        // Nếu selectAllow đã trả về false, hàm này sẽ không được gọi.
                        // Tuy nhiên, vẫn để kiểm tra bổ sung nếu cần hoặc để chuyển hướng.
                        var selectedDate = info.startStr;
                        window.location.href = '/Admin/AddAppointment?date=' + selectedDate;
                    },
                    eventClick: function(info) {
                        var eventId = info.event.id;
                        window.location.href = '/Admin/EditAppointment?id=' + eventId;
                    },
                    eventDidMount: function(info) {
                        $(info.el).tooltip({
                            title: `<b>${info.event.title}</b><br>` +
                                `Người dùng: ${info.event.extendedProps.userName}<br>` +
                                `Địa điểm: ${info.event.extendedProps.locationName}<br>` +
                                `Số khách: ${info.event.extendedProps.numberOfVisitors}<br>` +
                                `Tổng tiền: ${info.event.extendedProps.totalAmount}<br>` +
                                `Trạng thái: ${info.event.extendedProps.status}<br>` +
                                `Ghi chú: ${info.event.extendedProps.specialNotes || 'Không có'}<br>` +
                                `Ngày tạo: ${info.event.extendedProps.createdAt}<br>` +
                                `Ngày cập nhật: ${info.event.extendedProps.updatedAt}`,
                            placement: 'top',
                            html: true,
                            trigger: 'hover',
                            container: 'body'
                        });
                    },
                    // dayCellDidMount vẫn cần để thêm class CSS cho các ngày quá khứ (để làm mờ và ẩn số)
                    dayCellDidMount: function(info) {
                        const cellDate = new Date(info.date);
                        cellDate.setHours(0, 0, 0, 0); // Chuẩn hóa ngày để so sánh
                        const todayDate = new Date();
                        todayDate.setHours(0, 0, 0, 0); // Chuẩn hóa ngày hôm nay

                        if (cellDate < todayDate) {
                            // Thêm class 'fc-day-past' để CSS tùy chỉnh làm mờ và ẩn số ngày được áp dụng
                            $(info.el).addClass('fc-day-past');
                        }
                    }
                });
                calendar.render();
                window.calendar = calendar; // Gán instance vào window
            } else {
                console.error("Element with ID 'calendar' not found. FullCalendar cannot be initialized.");
            }
        });

        // Chỉ cần gọi updateSize nếu lịch có thể thay đổi kích thước sau khi load
        // if (window.calendar && typeof window.calendar.updateSize === "function") {
        //     window.calendar.updateSize();
        // }
    </script>
}